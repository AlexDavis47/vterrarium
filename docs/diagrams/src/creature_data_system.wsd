@startuml creature_data_system
Title: Creature Data System with Resource-Based Components

'Classes
class Creature {
    +creature_data: CreatureData
    +components: Array[CreatureComponent]
    +save_to_data(): void
    +load_from_data(): void
}

class CreatureData extends Resource {
    +creature_name: String
    +creature_id: String
    +rarity: Enum
    +age: float
    +component_data: Dictionary<String, Resource>
    +creature_scene_path: String
}

class CreatureComponent {
    +creature: Creature
    +component_data: Resource
    +save_to_data(): void
    +load_from_data(): void
    +get_component_id(): String
}

class ComponentData extends Resource {
    +component_id: String
}

class HungerComponentData extends ComponentData {
    +satiation: float
    +hunger_rate: float
}

class CreatureHungerComponent {
    +component_data: HungerComponentData
    +save_to_data(): void
    +load_from_data(): void
    +get_component_id(): String
}

class CreatureFactory {
    +creature_templates: Dictionary<String, CreatureData>
    +generate_random_creature(): Creature
    +generate_creature_from_template(template_id: String): Creature
    +spawn_creature_from_id(creature_id: String, parent: Node): Creature
    +spawn_creature_from_data(creature_data: CreatureData, parent: Node): Creature
}

class CreatureRegistry {
    +owned_creatures: Dictionary<String, CreatureData>
    +add_creature(creature_data: CreatureData): void
    +remove_creature(creature_id: String): void
    +get_creature(creature_id: String): CreatureData
    +save_registry(): void
    +load_registry(): void
}

class SaveManager {
    +registry: CreatureRegistry
    +save_creature(creature: Creature): void
    +remove_creature(creature_id: String): void
    +load_game_data(): void
    +save_game_data(): void
}

'Relationships
Creature o-- CreatureData : has
Creature *-- CreatureComponent : contains
CreatureComponent <|-- CreatureHungerComponent : extends
CreatureComponent o-- ComponentData : has
ComponentData <|-- HungerComponentData : extends
CreatureHungerComponent o-- HungerComponentData : has
CreatureFactory --> Creature : creates
CreatureRegistry o-- "*" CreatureData : stores
SaveManager o-- CreatureRegistry : manages
CreatureFactory ..> CreatureRegistry : gets data from

note right of CreatureData
    CreatureData is a resource that holds all serializable
    creature information, including a dictionary of
    component-specific resources.
end note

note right of ComponentData
    Each component type has its own resource subclass
    for storing component-specific data. These are
    referenced in the CreatureData's component_data dict.
end note

@enduml
